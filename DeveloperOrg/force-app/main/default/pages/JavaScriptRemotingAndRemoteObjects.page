<!-- Maicon Santos, 14/05/2023 -->
<!-- JavaScript remoting and remote objects study demo -->

<apex:page controller="JSRemotingAndRemoteObjectsController" title="JavaScript Remoting and Remote Objects">
    <style>
        .title {margin: auto; text-align: center;}
        h2 {font-size: 2em;}
        .searchBar {margin: auto; display: flex;}

        .filterName {
            width: 100%;
            padding: 4px;
            margin: 8px;
        }
        .btnSearch {
            font-size: 1.5em;
            padding: 4px 16px;
            margin: 8px;
        }

        .recordsTable {width: 100%;}
        .recordsTable th {
            background-color: aqua;
            padding: 6px;
        }
        .recordsTable tr:nth-child(odd){
            color: #000000;
            background-color: #C2FFFF;
        }

        #details p {font-size:2em; margin: auto;}
    </style>

    <script type="text/javascript">
        function getRecordsDetails() {
            var filter = document.getElementById("JSRFilter").value;
            console.log(filter);

            fetchProductsByRemoteObjects(filter);
                     
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.JSRemotingAndRemoteObjectsController.getProductList}',
                filter,
                function(result, event) {
                    if (event.status) {                        
                        var l = result.length;
                        if (l==0) document.getElementById("details").innerHTML='<p>No Results!</p>';
                        else {
                            var markup ='<table class="recordsTable">';
                            markup += '<tr><th>Product</th><th>Product Code</th><th>Description</th></tr>';
                            for(var i=0; i<l;i++) {
                                var recordDetail = '<tr>' + 
                                    "<td>" +result[i].Name + "</td>" +
                                    "<td>" + result[i].ProductCode+ "</td>" +
                                    "<td>" + result[i].Description + "</td>" +                                  
                                    '</tr>';
                                markup += recordDetail;
                            }

                            var details = document.getElementById("details");
                            removeAllChildNodes(details);
                            details.innerHTML = markup;
                        }                                                                       
                    }
                    else if (event.type === 'exception') document.getElementById("details").innerHTML = event.message + "<br/>\n<pre>" + event.where + "</pre>";
                    else document.getElementById("details").innerHTML = event.message;
                },
                {escape: true}
            );
        }

        function fetchProductsByRemoteObjects(filter) {
            // Create a new Remote Object
            var wh = new SObjectModel.Product();
            
            // Use the Remote Object to query for 10 warehouse records
            wh.retrieve({ limit: 10, where: {Name: {like: '%'+filter+'%' }} }, function(err, records, event){
                if (err) alert(err.message);
                else {
                    var ul = document.getElementById("productList");
                    removeAllChildNodes(ul);
                    
                    records.forEach(function(record) {
                        // Build the text for a warehouse line item
                        var whText = record.get("Name");
                        whText += " -- ";
                        whText += record.get("Description");
                        
                        // Add the line item to the warehouses list
                        var li = document.createElement("li");
                        li.appendChild(document.createTextNode(whText));
                        ul.appendChild(li);
                    });
                }
            });
        };

        function removeAllChildNodes(parent) {
            while (parent.firstChild) parent.removeChild(parent.firstChild);
        }

        const container = document.querySelector('#container');
        removeAllChildNodes(container);
    </script>

    <div class="title">
        <h2>Query Products by using JavaScript Remoting</h2>
    </div>

    <div class="searchBar">
        <input type="text" id="JSRFilter" class="filterName" placeholder="Filter product by name" />
        <input type="button" value="Find" class="btnSearch" onclick="getRecordsDetails();" />
    </div>

    <br/>

    <div id="details"></div>

    <!-- Remote Objects definition to set accessible sObjects and fields -->
    <apex:remoteObjects >
        <apex:remoteObjectModel name="Product2" jsShorthand="Product" fields="Id,Name,ProductCode,Description">
            <!-- <apex:remoteObjectField name="Phone__c" jsShorthand="Phone"/> -->
        </apex:remoteObjectModel>
    </apex:remoteObjects>

    <script>
    </script>

    <div class="title">
        <h2>Retrieve Products via Remote Objects</h2>
    </div>

    <p>Products:</p>

    <ul id="productList"></ul>
</apex:page>